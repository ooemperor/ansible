---
- name: Include OS-specific variables. # noqa no-free-form
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: Setup debian
  ansible.builtin.include_tasks: setup-debian.yml
  when: ansible_os_family == 'Debian'

- name: Ensure dependencies are installed. # noqa no-free-form
  ansible.builtin.package: name=curl state=present

- name: Setup containerd
  ansible.builtin.include_tasks: setup-containerd.yml

- name: Install Kubernetes packages.
  ansible.builtin.package:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
  notify: restart kubelet
  with_items: "{{ kubernetes_packages }}"

- name: Setup sysctl
  ansible.builtin.include_tasks: sysctl-setup.yml

- name: Ensure kubelet is started and enabled at boot.
  ansible.builtin.service:
    name: kubelet
    state: started
    enabled: true

- name: Check if Kubernetes has already been initialized.
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_init_stat

- name: Setup control plane
  ansible.builtin.include_tasks: setup-linux-settings.yml

- name: Setup control plane
  ansible.builtin.include_tasks: control-plane-setup.yml
  when: kubernetes_role == 'control_plane'

# Set up nodes.
- name: Get the kubeadm join command from the Kubernetes control plane.
  ansible.builtin.command: kubeadm token create --print-join-command
  changed_when: false
  when: kubernetes_role == 'control_plane'
  register: kubernetes_join_command_result

- name: Set the kubeadm join command globally.
  ansible.builtin.set_fact:
    kubernetes_join_command: >
      {{ kubernetes_join_command_result.stdout }}
      {{ kubernetes_join_command_extra_opts }}
  when: kubernetes_join_command_result.stdout is defined
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['kubernetes'] }}"

- name: Setup nodes
  ansible.builtin.include_tasks: node-setup.yml
  when: kubernetes_role == 'node'
